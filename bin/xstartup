#!/bin/bash
[ -f $HOME/.vnc2hpc/xstartup.log ] && rm $HOME/.vnc2hpc/xstartup.log
exec > >(tee -ai $HOME/.vnc2hpc/xstartup.log >&1)
exec 2> >(tee -ai $HOME/.vnc2hpc/xstartup.log >&2)
[[ "${VNC2HPC_INSTALL_PATH}x" != x ]] || exit -1
[[ "${VNC2HPC_WM}x" != x ]] || exit -1 
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
[ -r /etc/profile ] && source /etc/profile
[ -n "$BASH_ENV" ] && source "$BASH_ENV"
command -v xdpyinfo >/dev/null 2>&1 && \
    geometry=`xdpyinfo | grep dimensions | awk '{print $2}'`

[ -r $HOME/.Xresources ] && \
    xrdb -merge $HOME/.Xresources
[ -r $HOME/.Xresources_$geometry ] && \
    xrdb -merge $HOME/.Xresources_$geometry

#SSH_AGENT=$(which ssh-agent)
#[ -n "$SSH_ASKPASS" ] && eval $($SSH_AGENT) && ssh-add &
# this establishes a default windowing env.
# The user may have their own clients they want to run.  If they don't,
# fall back to system defaults.

# Reusable arch/os variables:
if /usr/projects/hpcsoft/utilities/bin/sys_arch &>/dev/null ; then 
    ARCH=$(/usr/projects/hpcsoft/utilities/bin/sys_arch)
else
    ARCH=$(uname -p)
fi

if /usr/projects/hpcsoft/utilities/bin/sys_os &>/dev/null ; then 
    OS=$(/usr/projects/hpcsoft/utilities/bin/sys_os)
else
    OS=$(uname -o | sed 's/\//_/g')
fi

if ls /usr/projects/hpcsoft/${OS}/common/${ARCH}/${VNC2HPC_WM} &>/dev/null; then
    INSTALL_PATH="/usr/projects/hpcsoft"
elif $( which ${VNC2HPC_WM} &>/dev/null ) ; then
    ## assume the user PATH is set to use from system
    INSTALL_PATH=$(dirname $(dirname $(which ${VNC2HPC_WM}) ) )
else
    INSTALL_PATH="$HOME/.vnc2hpc"
fi


case "$VNC2HPC_WM" in
    awesome)
        # Can't get this to build, yet!
        # Setup installation variables for reuse
        PRODUCT="awesome"
        VERSION="4.3"
        AWESOME_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        AWESOME_BIN="${AWESOME_PREFIX}/bin"
        AWESOME_LIB="${AWESOME_PREFIX}/lib"
        AWESOME_SHARE="${AWESOME_PREFIX}/share"

        module purge &>/dev/null
        module load gcc
        # Set path to use WM
        export PATH=${AWESOME_BIN}:${PATH}
        # Test that the directories exist before modifying environment
        [ -d ${AWESOME_SHARE} ] && export XDG_DATA_DIRS=${AWESOME_SHARE}:${XDG_DATA_DIRS}
        [ -d ${AWESOME_LIB} ] && export LD_LIBRARY_PATH=${AWESOME_LIB}:${LD_LIBRARY_PATH}

        # test executables before invoking them
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${AWESOME_BIN}/awesome] && ${VNC2HPC_AGENT} awesome
    ;;
    berry)
        # Setup installation variables for reuse
        PRODUCT="berry"
        VERSION="0.1.7"
        BERRY_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        BERRY_BIN="${BERRY_PREFIX}/bin"
        BERRY_LIB="${BERRY_PREFIX}/lib"
        BERRY_SHARE="${BERRY_PREFIX}/share"

        module purge &>/dev/null
        module load gcc
        PRODUCT="lemonbar"
        VERSION="v1.4"
        LEMONBAR_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        LEMONBAR_BIN="${LEMONBAR_PREFIX}/bin"
        # Test that the directories exist before modifying environment
#	[ -d ${BERRY_SHARE} ] && export XDG_DATA_DIRS=${BERRY_SHARE}:${XDG_DATA_DIRS}
        [ -d ${BERRY_LIB} ] && export LD_LIBRARY_PATH=${BERRY_LIB}:${LD_LIBRARY_PATH}
        # Set path to use WM and Lemonbar
        export PATH=${BERRY_BIN}:${LEMONBAR_BIN}:${PATH}

        # test executables before invoking them
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${BERRY_BIN}/lemonbar ] && ${BERRY_BIN}/lemonbar -b &
        [ -x ${BERRY_BIN}/berry ] && ${VNC2HPC_AGENT} berry
    ;;
    ice*)
        if [[ "${INSTALL_PATH}" =~ users ]] || [[ "${INSTALL_PATH}" =~ hpcsoft ]] || [[ "${INSTALL_PATH}" =~ home ]] ; then
            # Setup installation variables for reuse
            PRODUCT="icewm"
            VERSION="1.9.2"
            ICEWM_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
            ICEWM_BIN="${ICEWM_PREFIX}/bin"
            ICEWM_LIB="${ICEWM_PREFIX}/lib"
            ICEWM_SHARE="${ICEWM_PREFIX}/share"
           # Set path to use WM
            export PATH=${ICEWM_BIN}:${PATH}
            [ -d ${ICEWM_LIB} ] && export LD_LIBRARY_PATH=${ICEWM_LIB}:${LD_LIBRARY_PATH}
        else
            ICEWM_PREFIX="${INSTALL_PATH}"
            ICEWM_BIN="${ICEWM_PREFIX}"
            ICEWM_SHARE="${ICEWM_PREFIX}/share/${PRODUCT}"
        fi
#        [ ! -d ${HOME}/.icewm ]  && mkdir ${HOME}/.icewm && cp -Rf ${ICEWM_PREFIX}/themes ${HOME}/.icewm/
        [ -d ${ICEWM_SHARE} ] && export XDG_DATA_DIRS=${ICEWM_SHARE}:${XDG_DATA_DIRS}
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x ${ICEWM_BIN}/icewmbg ] && icewmbg --restart
        [ -x ${ICEWM_BIN}/icewm-session ] && ${VNC2HPC_AGENT} icewm-session
    ;;
    fv*)
        # Setup installation variables for reuse
        PRODUCT="fvwm"
        VERSION="2.6.9"
        FVWM_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        FVWM_BIN="${FVWM_PREFIX}/bin"
        FVWM_LIB="${FVWM_PREFIX}/lib"
	FVWM_SHARE="${FVWM_PREFIX}/share"

        # Set path to use WM
        export PATH=${FVWM_BIN}:${PATH}
	[ -d ${FVWM_SHARE} ] && export XDG_DATA_DIRS=${FVWM_SHARE}:${XDG_DATA_DIRS}
        [ -d ${FVWM_LIB} ] && export LD_LIBRARY_PATH=${FVWM_LIB}:${LD_LIBRARY_PATH}
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x ${FVWM_BIN}/fvwm ] && ${VNC2HPC_AGENT} fvwm
    ;;
    mwm|motif*)
        # Setup installation variables for reuse
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x /usr/bin/mwm ] && ${VNC2HPC_AGENT} /usr/bin/mwm
    ;;
    openbox*)
        # Setup installation variables for reuse
        PRODUCT="openbox"
        VERSION="3.6.1"
        OBX_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        OBX_BIN="${OBX_PREFIX}/bin"
        OBX_LIB="${OBX_PREFIX}/lib"
	OBX_SHARE="${OBX_PREFIX}/share"
        OBX_ETC="${OBX_PREFIX}/etc"
        # Set path to use WM
        export PATH=${OBX_BIN}:${PATH}

	[ -d ${OBX_SHARE} ] && export XDG_DATA_DIRS=${OBX_SHARE}:${XDG_DATA_DIRS}
        [ -d ${OBX_LIB} ] && export LD_LIBRARY_PATH=${OBX_LIB}:${LD_LIBRARY_PATH}
        [ -d ${OBX_ETC} ] && [ ! -d $HOME/.config/openbox ] && mkdir -p $HOME/.config/openbox && cp ${OBX_ETC}/xdg/openbox/* $HOME/.config/openbox/.
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${OBX_BIN}/gdm-control ] && gdm-control &
        [ -x ${OBX_BIN}/gnome-panel-control ] && gnome-panel-control &
        [ -x ${OBX_BIN}/openbox ] && ${VNC2HPC_AGENT} openbox
    ;;
    xfwm4)
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x /usr/bin/xfwm4 ] && ${VNC2HPC_AGENT} /usr/bin/xfwm4
    ;;
    gdm|gnome-session)
        unset SESSION_MANAGER
        unset DBUS_SESSION_BUS_ADDRESS
        export XDG_SESSION_TYPE=x11
        OS=`uname -s`
        
        # Emulate DGM
        USESTARTUP=0
        if [ -x /usr/bin/gnome-session ] ; then
        # Use Unity 2D on Ubuntu 12 if no WM is specified. Unity 3D 5.20.x doesn't
        # even pretend to work properly with our X server. 
        if [ -f /usr/share/gnome-session/sessions/ubuntu-2d.session -a -z "$TVNC_WM" ] ; then
            TVNC_WM=2d
        fi
        case "$TVNC_WM" in
            2d)
                # Ubuntu 12: ubuntu-2d
                # Ubuntu 14: gnome-fallback
                for SESSION in "gnome-fallback" "ubuntu-2d" "2d-gnome" ; do
                    if [ -f /usr/share/gnome-session/sessions/$SESSION.session ]; then
                        DESKTOP_SESSION=$SESSION; export DESKTOP_SESSION
                        XDG_CURRENT_DESKTOP=$SESSION; export XDG_CURRENT_DESKTOP
                    fi
                done
                # RHEL 7, Fedora
                if [ -f /usr/share/gnome-session/sessions/gnome-classic.session ] ; then
                    DESKTOP_SESSION=gnome-classicc; export DESKTOP_SESSION
                    GNOME_SHELL_SESSION_MODE=classic; export GNOME_SHELL_SESSION_MODE
                    XDG_CURRENT_DESKTOP="GNOME-classic:GNOME"; export XDG_CURRENT_DESKTOP
                    USESTARTUP=1
                fi
                # Ubuntu 16+
                if [ -f /usr/share/gnome-session/sessions/gnome-flashback-metacity.session ]; then
                    DESKTOP_SESSION=gnome-flashback-metacity; export DESKTOP_SESSION
                    grep -q "unity" /usr/share/gnome-sessions/sessions/gnome-flashback-metacity.session && {
                        XDG_CURRENT_DESKTOP="GNOME-Flashback:Unity";
                        export XDG_CURRENT_DESKTOP;
                    } || {
                        XDG_CURRENT_DESKTOP="GNOME-Flashback:GNOME";
                        export XDG_CURRENT_DESKTOP="GNOME-Flashback:GNOME";
                        GNOME_SHELL_SESSION_MODE=ubuntu; export GNOME_SHELL_SESSION_MODE;
                        USESTARTUP=1; 
                    }
                fi
                unset TVNC_WM
                ;;
            *)
               # This is necceesary to make Unity work on Ubuntu 16, and on Ubuntu 14, it
               # ensures that the proper compiz profile is setup. Otherwise, if you
               # accidentally launch Unity in a TurboVNC session that lacks OpenGL
               # support, compiz will automatically disable its OpenGL plugin, requiring
               # you to reset the compiz plugin state before Unity will work again.
                if [ -f /usr/share/gnome-session/sessions/ubuntu.session -a "$TVNC_WM" = "" ] ; then
                    DESKTOP_SESSION=ubuntu; export DESKTOP_SESSION;
                    grep -qE "DesktopName\s*=\s*Unity" /usr/share/gnome-session/sessions/ubuntu.session && {
                        XDG_CURRENT_DESKTOP=Unity; export XDG_CURRENT_DESKTOP;
                    } || {
                        XDG_CURRENT_DESKTOP=ubuntu:GNOME; export XDG_CURRENT_DESKTOP;
                        GNOME_SHELL_SESSION_MODE=ubuntu; export GNOME_SHELL_SESSION_MODE;
                        USESTARTUP=1;
                    }
                fi
                ;;
         esac
         if [ "$DESKTOP_SESSION" != "" ] ; then
             GDMSESSION=$DESKTOP_SESSION; export GDMSESSION
             SESSIONTYPE=gnome-session; export SESSIONTYPE
             STARTUP="/usr/bin/gnome-session --session=$DESKTOP_SESSION"
             export STARTUP
         fi
      fi

      if [ "$TVNC_VGL" = "1" ] ; then
         if [ -z "$SSH_AGENT_PID" -a -x /usr/bin/ssh-agent ] ; then
             TVNC_SSHAGENT=/usr/bin/ssh-agent
         fi
         if [ -z "$TVNC_VGLRUN" ] ; then 
             TVNC_VGLRUN="vglrun +wm"
         fi
      fi
   
      if [ "$STARTUP" != "" -a "$USESTARTUP" = "1" ] ; then
         exec $TVNC_VGLRUN $STARTUP
      fi
      if [ "$TVNC_WM" = "" ] ; then
         # Typical system-wide WM Startup script on Linux and Solaris 11
         if [ -f /etc/X11/xinit/xinitrc ] ; then
             TVNC_WM=/etc/X11/xinit/xinitrc
         fi
         # Typical system-wide WM  startup script on Solaris 10
         if [ $OS = 'SunOS' -a -f /usr/dt/config/Xinitrcc.jds ]; then
           TVNC_WM=/usr/dt/config/Xinitrc.jds
         fi
         # Typical peer-user WM startup script on Solaris 10
         if [  $OS = 'SunOS' -a -f $HOME/.dt/sessions/lastsession ]; then
           TVNC-WM=`cat $HOME/.dt/sessions/lastsession`
         fi
      else
         TVNC_WM=`which "$TVNC_WM" 2>/dev/null`
      fi
      if [ "$TVNC_WM" != "" ] ; then 
         if [ -x "$TVNC_WM" ] ; then
             exec $TVNC_SSHAGENT $TVNC_VGLRUN "$TVNC_WM"
         else
             exec $TVNC_SSHAGENT $TVNC_VGLRUN sh "$TVNC_WM"
         fi
      else
         echo "no window manager startup script found.  Use the TVNC_WM environment"
         echo "variable to specify the path to aa window manager startup sccript or" 
         echo "executable.  Falling back to TWM."
         which twm >/dev/null && {
             if [ -f $HOME/.Xresourcecs ] ; then xrdb $HOME/.Xresources; fi 
             xsetroot -solid grey
             xterm -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
             twm
         } || {
             echo "TWM not found. I  give up" 
             exit 1
         } 
      fi 
                     
# Assume either Gnome or KDE will be started by default when installed
# We want to kill the session automatically in this case when user logs out. In case you modify
# /etc/X11/xinit/Xclients or ~/.Xclients yourself to achieve a different result, then you should
# be responsible to modify below code to avoid that your session will be automatically killed
#if [ -e /usr/bin/gnome-session -o -e /usr/bin/startkde ]; then
#    vncserver -kill $DISPLAY
#fi
#export XDG_CURRENT_DESKTOP="GNOME-Flashback:GNOME"
#export XDG_MENU_PREFIX="gnome-flashback-"

#gnome-session --session=gnome-classic --disable-acceleration-check &
    ;;
    *)
        echo "UNSUPPORTED $1"
        exit 1
    ;;
esac

#!/bin/bash
[ -f $HOME/.vnc2hpc/xstartup.log ] && rm $HOME/.vnc2hpc/xstartup.log
exec > >(tee -ai $HOME/.vnc2hpc/xstartup.log >&1)
exec 2> >(tee -ai $HOME/.vnc2hpc/xstartup.log >&2)
[[ "${VNC2HPC_INSTALL_PATH}x" != x ]] || exit -1
[[ "${VNC2HPC_WM}x" != x ]] || exit -1 
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
[ -r /etc/profile ] && source /etc/profile
[ -n "$BASH_ENV" ] && source "$BASH_ENV"
command -v xdpyinfo >/dev/null 2>&1 && \
    geometry=`xdpyinfo | grep dimensions | awk '{print $2}'`

[ -r $HOME/.Xresources ] && \
    xrdb -merge $HOME/.Xresources
[ -r $HOME/.Xresources_$geometry ] && \
    xrdb -merge $HOME/.Xresources_$geometry

#SSH_AGENT=$(which ssh-agent)
#[ -n "$SSH_ASKPASS" ] && eval $($SSH_AGENT) && ssh-add &
# this establishes a default windowing env.
# The user may have their own clients they want to run.  If they don't,
# fall back to system defaults.

# Reusable arch/os variables:
if /usr/projects/hpcsoft/utilities/bin/sys_arch &>/dev/null ; then 
    ARCH=$(/usr/projects/hpcsoft/utilities/bin/sys_arch)
else
    ARCH=$(uname -p)
fi

if /usr/projects/hpcsoft/utilities/bin/sys_os &>/dev/null ; then 
    OS=$(/usr/projects/hpcsoft/utilities/bin/sys_os)
else
    OS=$(uname -o | sed 's/\//_/g')
fi

if ls /usr/projects/hpcsoft/${OS}/common/${ARCH}/${VNC2HPC_WM} &>/dev/null; then
    INSTALL_PATH="/usr/projects/hpcsoft"
elif $( which ${VNC2HPC_WM} &>/dev/null ) ; then
    ## assume the user PATH is set to use from system
    INSTALL_PATH=$(dirname $(dirname $(which ${VNC2HPC_WM}) ) )
else
    INSTALL_PATH="$HOME/.vnc2hpc"
fi


case "$VNC2HPC_WM" in
    awesome)
        # Can't get this to build, yet!
        # Setup installation variables for reuse
        PRODUCT="awesome"
        VERSION="4.3"
        AWESOME_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        AWESOME_BIN="${AWESOME_PREFIX}/bin"
        AWESOME_LIB="${AWESOME_PREFIX}/lib"
        AWESOME_SHARE="${AWESOME_PREFIX}/share"

        module purge &>/dev/null
        module load gcc
        # Set path to use WM
        export PATH=${AWESOME_BIN}:${PATH}
        # Test that the directories exist before modifying environment
        [ -d ${AWESOME_SHARE} ] && export XDG_DATA_DIRS=${AWESOME_SHARE}:${XDG_DATA_DIRS}
        [ -d ${AWESOME_LIB} ] && export LD_LIBRARY_PATH=${AWESOME_LIB}:${LD_LIBRARY_PATH}

        # test executables before invoking them
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${AWESOME_BIN}/awesome] && ${VNC2HPC_AGENT} awesome
    ;;
    berry)
        # Setup installation variables for reuse
        PRODUCT="berry"
        VERSION="0.1.7"
        BERRY_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        BERRY_BIN="${BERRY_PREFIX}/bin"
        BERRY_LIB="${BERRY_PREFIX}/lib"
        BERRY_SHARE="${BERRY_PREFIX}/share"

        module purge &>/dev/null
        module load gcc
        PRODUCT="lemonbar"
        VERSION="v1.4"
        LEMONBAR_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        LEMONBAR_BIN="${LEMONBAR_PREFIX}/bin"
        # Test that the directories exist before modifying environment
#	[ -d ${BERRY_SHARE} ] && export XDG_DATA_DIRS=${BERRY_SHARE}:${XDG_DATA_DIRS}
        [ -d ${BERRY_LIB} ] && export LD_LIBRARY_PATH=${BERRY_LIB}:${LD_LIBRARY_PATH}
        # Set path to use WM and Lemonbar
        export PATH=${BERRY_BIN}:${LEMONBAR_BIN}:${PATH}

        # test executables before invoking them
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${BERRY_BIN}/lemonbar ] && ${BERRY_BIN}/lemonbar -b &
        [ -x ${BERRY_BIN}/berry ] && ${VNC2HPC_AGENT} berry
    ;;
    ice*)
        if [[ "${INSTALL_PATH}" =~ users ]] || [[ "${INSTALL_PATH}" =~ hpcsoft ]] || [[ "${INSTALL_PATH}" =~ home ]] ; then
            # Setup installation variables for reuse
            PRODUCT="icewm"
            VERSION="1.9.2"
            ICEWM_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
            ICEWM_BIN="${ICEWM_PREFIX}/bin"
            ICEWM_LIB="${ICEWM_PREFIX}/lib"
            ICEWM_SHARE="${ICEWM_PREFIX}/share"
           # Set path to use WM
            export PATH=${ICEWM_BIN}:${PATH}
            [ -d ${ICEWM_LIB} ] && export LD_LIBRARY_PATH=${ICEWM_LIB}:${LD_LIBRARY_PATH}
        else
            ICEWM_PREFIX="${INSTALL_PATH}"
            ICEWM_BIN="${ICEWM_PREFIX}"
            ICEWM_SHARE="${ICEWM_PREFIX}/share/${PRODUCT}"
        fi
#        [ ! -d ${HOME}/.icewm ]  && mkdir ${HOME}/.icewm && cp -Rf ${ICEWM_PREFIX}/themes ${HOME}/.icewm/
        [ -d ${ICEWM_SHARE} ] && export XDG_DATA_DIRS=${ICEWM_SHARE}:${XDG_DATA_DIRS}
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x ${ICEWM_BIN}/icewmbg ] && icewmbg --restart
        [ -x ${ICEWM_BIN}/icewm-session ] && ${VNC2HPC_AGENT} icewm-session
    ;;
    fv*)
        # Setup installation variables for reuse
        PRODUCT="fvwm"
        VERSION="2.6.9"
        FVWM_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        FVWM_BIN="${FVWM_PREFIX}/bin"
        FVWM_LIB="${FVWM_PREFIX}/lib"
	FVWM_SHARE="${FVWM_PREFIX}/share"

        # Set path to use WM
        export PATH=${FVWM_BIN}:${PATH}
	[ -d ${FVWM_SHARE} ] && export XDG_DATA_DIRS=${FVWM_SHARE}:${XDG_DATA_DIRS}
        [ -d ${FVWM_LIB} ] && export LD_LIBRARY_PATH=${FVWM_LIB}:${LD_LIBRARY_PATH}
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x ${FVWM_BIN}/fvwm ] && ${VNC2HPC_AGENT} fvwm
    ;;
    mwm|motif*)
        # Setup installation variables for reuse
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x /usr/bin/mwm ] && ${VNC2HPC_AGENT} /usr/bin/mwm
    ;;
    openbox*)
        # Setup installation variables for reuse
        PRODUCT="openbox"
        VERSION="3.6.1"
        OBX_PREFIX="${INSTALL_PATH}/${OS}/common/${ARCH}/${PRODUCT}/${VERSION}"
        OBX_BIN="${OBX_PREFIX}/bin"
        OBX_LIB="${OBX_PREFIX}/lib"
	OBX_SHARE="${OBX_PREFIX}/share"
        OBX_ETC="${OBX_PREFIX}/etc"
        # Set path to use WM
        export PATH=${OBX_BIN}:${PATH}

	[ -d ${OBX_SHARE} ] && export XDG_DATA_DIRS=${OBX_SHARE}:${XDG_DATA_DIRS}
        [ -d ${OBX_LIB} ] && export LD_LIBRARY_PATH=${OBX_LIB}:${LD_LIBRARY_PATH}
        [ -d ${OBX_ETC} ] && [ ! -d $HOME/.config/openbox ] && mkdir -p $HOME/.config/openbox && cp ${OBX_ETC}/xdg/openbox/* $HOME/.config/openbox/.
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x ${OBX_BIN}/gdm-control ] && gdm-control &
        [ -x ${OBX_BIN}/gnome-panel-control ] && gnome-panel-control &
        [ -x ${OBX_BIN}/openbox ] && ${VNC2HPC_AGENT} openbox
    ;;
    xfwm4)
        [ -x /usr/bin/xsetroot ] && /usr/bin/xsetroot -solid '#222E45'
        [ -x /usr/bin/vncconfig ] && /usr/bin/vncconfig -nowin &
        [ -x /usr/bin/xterm ] && /usr/bin/xterm &
        [ -x /usr/bin/xfwm4 ] && ${VNC2HPC_AGENT} /usr/bin/xfwm4
    ;;
    gdm|gnome-session)
    ## direct copy of /etc/X11/xinit/Xsession for gnome-session support
    # Copyright (C) 1999 - 2004 Red Hat, Inc. All rights reserved. This
    # copyrighted material is made available to anyone wishing to use, modify,
    # copy, or redistribute it subject to the terms and conditions of the
    # GNU General Public License version 2.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program; if not, write to the Free Software
    # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
    
    # redirect errors to a file in user's home directory if we can
    if [ -z "$GDMSESSION" ]; then
        # GDM redirect output itself in a smarter fashion
        errfile="$HOME/.xsession-errors"
        if ( umask 077 && cp /dev/null "$errfile" 2> /dev/null ); then
            chmod 600 "$errfile"
            [ -x /sbin/restorecon ] && /sbin/restorecon $errfile
            exec > "$errfile" 2>&1
        else
            errfile=$(mktemp -q /tmp/xses-$USER.XXXXXX)
            if [ $? -eq 0 ]; then
                exec > "$errfile" 2>&1
            fi
        fi
    fi

    SWITCHDESKPATH=/usr/share/switchdesk
    
    # Mandatorily source xinitrc-common, which is common code shared between the
    # Xsession and xinitrc scripts which has been factored out to avoid duplication
    . /etc/X11/xinit/xinitrc-common

    # This Xsession.d implementation, is intended to obsolte and replace the
    # various mechanisms present in the 'case' statement which follows, and to
    # eventually be able to easily remove all hard coded window manager specific
    # content from this script.  See bug #142260 for additional explanation and
    # details.  All window manager rpm packages and desktop environment
    # packages should be modified to provide the Xsession.d/Xsession.$wm scripts
    # to start themselves up.  In the future, the legacy switchdesk mechanisms
    # and hard coded window managers and desktop environments will be removed from
    # this script. 
    XCLIENTS_D=/etc/X11/xinit/Xclients.d
    if [ "$#" -eq 1 ] && [ -x "$XCLIENTS_D/Xclients.$1.sh" ]; then
        exec -l $SHELL -c "$CK_XINIT_SESSION $SSH_AGENT $XCLIENTS_D/Xclients.$1.sh"
    else
    # now, we see if xdm/gdm/kdm has asked for a specific environment
    case $# in
    1)
        if [ -x "$SWITCHDESKPATH/Xclients.$1" ]; then
           exec -l $SHELL -c "$SWITCHDESKPATH/Xclients.$1";
        fi;

        case "$1" in
            failsafe)
	        exec -l $SHELL -c "xterm -geometry 80x24-0-0"
	        ;;
	    gnome|gnome-session)
	        # lack of SSH_AGENT is intentional, see #441123.  though
	        # the whole thing should really happen in xinitrc.d anyway.
	        exec -l $SHELL -c gnome-session
	        exec /bin/sh -c "exec -l $SHELL -c \"gnome-session\"" 
	        ;;
	    kde|kde1|kde2)
                exec $CK_XINIT_SESSION $SSH_AGENT /bin/sh -c "exec -l $SHELL -c \"startkde\""
	        ;;
            twm)
                # fall back to twm
	        exec $CK_XINIT_SESSION $SSH_AGENT /bin/sh -c "exec -l $SHELL -c \"twm\""
	        ;;
            *)
                # GDM provies either a command line as the first argument or
                # provides 'failsafe', 'default' or 'custom'.  KDM will do the
                # same at some point
                if [ "$1" != "default" -a "$1" != "custom" ]; then
                    exec $CK_XINIT_SESSION $SSH_AGENT /bin/sh -c "exec -l $SHELL -c \"$1\""
	        fi
	        ;;
        esac
    esac
    fi

    # otherwise, take default action
    if [ -x "$HOME/.xsession" ]; then
        exec -l $SHELL -c "$CK_XINIT_SESSION $SSH_AGENT $HOME/.xsession"
    elif [ -x "$HOME/.Xclients" ]; then
        exec -l $SHELL -c "$CK_XINIT_SESSION $SSH_AGENT $HOME/.Xclients"
    elif [ -x /etc/X11/xinit/Xclients ]; then
        exec -l $SHELL -c "$CK_XINIT_SESSION $SSH_AGENT /etc/X11/xinit/Xclients"
    else
        # should never get here; failsafe fallback
        exec -l $SHELL -c "xsm"
    fi

        *)
            "echo UNSUPPORTED $1"
            exit 1 ;
        ;;
    esac
    ;;
